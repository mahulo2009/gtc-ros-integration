// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:652

#ifndef _TAO_IDL_IDLC___LINUX_FILTERWHEELS_CPP_
#define _TAO_IDL_IDLC___LINUX_FILTERWHEELS_CPP_


#include "FILTERWHEELS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1867

class TAO_FILTERWHEEL_FilterWheel_ifce_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_FILTERWHEEL_FilterWheel_ifce_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_FILTERWHEEL_FilterWheel_ifce_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     127, 127, 127, 127, 127,  10, 127,  45, 127,  50,
      35,  10,  10,  30,  56,   0, 127, 127, 127,   0,
      50, 127,  40, 127,   0,  10,   5, 127, 127, 127,
     127,   0, 127, 127, 127, 127, 127, 127,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_FILTERWHEEL_FilterWheel_ifce_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 51,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 26,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 126,
      HASH_VALUE_RANGE = 120,
      DUPLICATES = 6,
      WORDLIST_SIZE = 58
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"isReady", &POA_DCF::Device_ifce::isReady_skel, 0},
      {"init", &POA_DCF::Device_ifce::init_skel, 0},
      {"reset", &POA_DCF::Device_ifce::reset_skel, 0},
      {"report", &POA_DCF::Device_ifce::report_skel, 0},
      {"isFault", &POA_DCF::Device_ifce::isFault_skel, 0},
      {"test", &POA_DCF::Device_ifce::test_skel, 0},
      {"isOff", &POA_DCF::Device_ifce::isOff_skel, 0},
      {"isIdle", &POA_DCF::Device_ifce::isIdle_skel, 0},
      {"restore", &POA_DCF::Device_ifce::restore_skel, 0},
      {"internals", &POA_DCF::Device_ifce::internals_skel, 0},
      {"start", &POA_DCF::Device_ifce::start_skel, 0},
      {"isComposite", &POA_DCF::Device_ifce::isComposite_skel, 0},
      {"isConfigurable", &POA_DCF::Device_ifce::isConfigurable_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"enable", &POA_DCF::Device_ifce::enable_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_get_name", &POA_DCF::Device_ifce::_get_name_skel, 0},
      {"_get_state", &POA_DCF::Device_ifce::_get_state_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_alarms", &POA_DCF::Device_ifce::_get_alarms_skel, 0},
      {"_get_filterWheelFilter", &POA_FILTERWHEEL::FilterWheel_ifce::_get_filterWheelFilter_skel, 0},
      {"_get_className", &POA_DCF::Device_ifce::_get_className_skel, 0},
      {"_get_startTime", &POA_DCF::Device_ifce::_get_startTime_skel, 0},
      {"_get_magnitudes", &POA_DCF::Device_ifce::_get_magnitudes_skel, 0},
      {"_get_properties", &POA_DCF::Device_ifce::_get_properties_skel, 0},
      {"isHalting", &POA_DCF::Device_ifce::isHalting_skel, 0},
      {"isRunning", &POA_DCF::Device_ifce::isRunning_skel, 0},
      {"isStarting", &POA_DCF::Device_ifce::isStarting_skel, 0},
      {"isResetting", &POA_DCF::Device_ifce::isResetting_skel, 0},
      {"isInitialising", &POA_DCF::Device_ifce::isInitialising_skel, 0},
      {"isDisabled", &POA_DCF::Device_ifce::isDisabled_skel, 0},
      {"moveCommand", &POA_FILTERWHEEL::FilterWheel_ifce::moveCommand_skel, 0},
      {"isIntegrated", &POA_DCF::Device_ifce::isIntegrated_skel, 0},
      {"stopDebug", &POA_DCF::Device_ifce::stopDebug_skel, 0},
      {"startDebug", &POA_DCF::Device_ifce::startDebug_skel, 0},
      {"disable", &POA_DCF::Device_ifce::disable_skel, 0},
      {"isOn", &POA_DCF::Device_ifce::isOn_skel, 0},
      {"abort", &POA_DCF::Device_ifce::abort_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_get_filterWheelMoving", &POA_FILTERWHEEL::FilterWheel_ifce::_get_filterWheelMoving_skel, 0},
      {"isShuttingDown", &POA_DCF::Device_ifce::isShuttingDown_skel, 0},
      {"halt", &POA_DCF::Device_ifce::halt_skel, 0},
      {"shutdown", &POA_DCF::Device_ifce::shutdown_skel, 0},
      {"configure", &POA_DCF::Device_ifce::configure_skel, 0},
      {"forceSampleData", &POA_MM::Monitor_ifce::forceSampleData_skel, 0},
      {"_get_version", &POA_DCF::Device_ifce::_get_version_skel, 0},
      {"ping", &POA_DCF::Device_ifce::ping_skel, 0},
      {"_get_configuration", &POA_DCF::Device_ifce::_get_configuration_skel, 0},
      {"_set_configuration", &POA_DCF::Device_ifce::_set_configuration_skel, 0},
      {"changeMonitorConfiguration", &POA_MM::Monitor_ifce::changeMonitorConfiguration_skel, 0},
    };

  static const signed short lookup[] =
    {
        -1,   -1,   -1,  -24,   -2,  -28,   -2,    7,   -1,    8,    9,   10,   11,   -1, 
        12,   13,   14,   15,   -1,   16,   17,   18,  -30,   -2,   19,   20,   21,   -1, 
        22,   23, -153,   26,   27,   -1, -155, -139,   -1,  -32,   -2, -128,   34,   35, 
        -1,   -1,   36,   37,   38,   39,   -1,   40,   41,   -1,   42,   -1,   43,   44, 
        -1,   -1,   -1,   45,   46,   -1,   47,   -1,   48,   49,   -1,   -1,   50,   51, 
        52,   -1,   53,   -1,   54,   -1,  -55,   -2, -128,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 
        57, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_FILTERWHEEL_FilterWheel_ifce_Perfect_Hash_OpTable tao_FILTERWHEEL_FilterWheel_ifce_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:93

POA_FILTERWHEEL::FilterWheel_ifce::FilterWheel_ifce (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_FILTERWHEEL_FilterWheel_ifce_optable;
}

POA_FILTERWHEEL::FilterWheel_ifce::FilterWheel_ifce (const FilterWheel_ifce& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_MM::Monitor_ifce (rhs),
    POA_DCF::Device_ifce (rhs)
{
}

POA_FILTERWHEEL::FilterWheel_ifce::~FilterWheel_ifce (void)
{
}

namespace POA_FILTERWHEEL
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class moveCommand_FilterWheel_ifce
    : public TAO::Upcall_Command
  {
  public:
    inline moveCommand_FilterWheel_ifce (
      POA_FILTERWHEEL::FilterWheel_ifce * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->moveCommand (
        arg_1);
    }
  
  private:
    POA_FILTERWHEEL::FilterWheel_ifce * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_FILTERWHEEL::FilterWheel_ifce::moveCommand_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DGT::_tc_GCSException
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_position;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_position
    };
  
  static size_t const nargs = 2;

  POA_FILTERWHEEL::FilterWheel_ifce * const impl =
    dynamic_cast<POA_FILTERWHEEL::FilterWheel_ifce *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  moveCommand_FilterWheel_ifce command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FILTERWHEEL
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class _get_filterWheelFilter_FilterWheel_ifce
    : public TAO::Upcall_Command
  {
  public:
    inline _get_filterWheelFilter_FilterWheel_ifce (
      POA_FILTERWHEEL::FilterWheel_ifce * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->filterWheelFilter ();
    }
  
  private:
    POA_FILTERWHEEL::FilterWheel_ifce * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_FILTERWHEEL::FilterWheel_ifce::_get_filterWheelFilter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_FILTERWHEEL::FilterWheel_ifce * const impl =
    dynamic_cast<POA_FILTERWHEEL::FilterWheel_ifce *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_filterWheelFilter_FilterWheel_ifce command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FILTERWHEEL
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class _get_filterWheelMoving_FilterWheel_ifce
    : public TAO::Upcall_Command
  {
  public:
    inline _get_filterWheelMoving_FilterWheel_ifce (
      POA_FILTERWHEEL::FilterWheel_ifce * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->filterWheelMoving ();
    }
  
  private:
    POA_FILTERWHEEL::FilterWheel_ifce * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_FILTERWHEEL::FilterWheel_ifce::_get_filterWheelMoving_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_FILTERWHEEL::FilterWheel_ifce * const impl =
    dynamic_cast<POA_FILTERWHEEL::FilterWheel_ifce *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_filterWheelMoving_FilterWheel_ifce command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:166



::CORBA::Boolean POA_FILTERWHEEL::FilterWheel_ifce::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:gtc/MM/Monitor_ifce:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:gtc/DCF/Device_ifce:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:gtc/FILTERWHEEL/FilterWheel_ifce:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_FILTERWHEEL::FilterWheel_ifce::_interface_repository_id (void) const
{
  return "IDL:gtc/FILTERWHEEL/FilterWheel_ifce:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:426

void POA_FILTERWHEEL::FilterWheel_ifce::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:373

FILTERWHEEL::FilterWheel_ifce *
POA_FILTERWHEEL::FilterWheel_ifce::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::FILTERWHEEL::FilterWheel_ifce STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

